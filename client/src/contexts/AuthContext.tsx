import React, { createContext, useState, useEffect, type ReactNode } from "react";
import type { User, AuthContextType } from "../types";
import api from "../services/api";

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [shouldRefreshChats, setShouldRefreshChats] = useState(false);

  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const token = localStorage.getItem("token");
    const storedUser = localStorage.getItem("user");

    if (token && storedUser) {
      try {
        const userData = JSON.parse(storedUser);
        setUser(userData);
      } catch (error) {
        console.error("Error parsing stored user:", error);
        localStorage.removeItem("user");
        localStorage.removeItem("token");
      }
    }
    setLoading(false);
  }, []);

  const login = async (email: string, password: string): Promise<void> => {
    const response = await api.post("/auth/login", { email, password });
    const userData = response.data;

    setUser(userData);
    localStorage.setItem("token", userData.token);
    localStorage.setItem("user", JSON.stringify(userData));
  };

  const register = async (email: string, password: string): Promise<void> => {
    const response = await api.post("/auth/register", { email, password });
    const userData = response.data;

    setUser(userData);
    localStorage.setItem("token", userData.token);
    localStorage.setItem("user", JSON.stringify(userData));
  };

  const handleOAuthSuccess = async (
    token: string,
    userId: string
  ): Promise<void> => {
    console.log("üîÑ handleOAuthSuccess called with:", { token, userId });

    // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
    localStorage.setItem("token", token);
    localStorage.setItem("userId", userId);

    try {
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã axios —É—Å–ø–µ–ª –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω
      await new Promise((resolve) => setTimeout(resolve, 100));

      // –ó–∞—Ç–µ–º –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const response = await api.get(`/auth/oauth/success?token=${token}`);
      const userData = response.data;

      console.log("‚úÖ User data received from server:", userData);

      // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      setUser(userData);
      localStorage.setItem("user", JSON.stringify(userData));

      console.log("‚úÖ User state updated in context");

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤
      setShouldRefreshChats(true);
      console.log("‚úÖ Chat refresh flag set");
    } catch (error) {
      console.error("‚ùå Error in handleOAuthSuccess:", error);
      throw error;
    }
  };

  const logout = (): void => {
    setUser(null);
    localStorage.removeItem("token");
    localStorage.removeItem("userId");
    localStorage.removeItem("user");
  };

  const value: AuthContextType = {
    user,
    login,
    register,
    logout,
    handleOAuthSuccess,
    loading,
    shouldRefreshChats, // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export { AuthContext };